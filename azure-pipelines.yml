trigger:
- master

pool:
  vmImage: 'macOS 10.14'

variables:
  isRemote: false
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  ANDROID_EMU_NAME: test
  ANDROID_EMU_ABI: x86
  ANDROID_EMU_TARGET: android-28
  ANDROID_EMU_TAG: google_apis
  XCODE_VERSION: 10.2
  IOS_PLATFORM_VERSION: 12.2
  IOS_DEVICE_NAME: iPhone X


steps:
- task: UseDotNet@2
  inputs:
    version: '2.1.x'
    
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: SonarCloudPrepare@1
  displayName: 'Prepare SonarCloud analysis'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'aqualityautomation'
    projectKey: 'aquality-automation_aquality-appium-mobile-dotnet'
    projectName: 'aquality-appium-mobile-dotnet'
    projectVersion: '$(Build.BuildNumber)'
    extraProperties: |
      sonar.coverage.exclusions=**/**

- script: dotnet build Aquality.Appium.Mobile/Aquality.Appium.Mobile.sln -c $(buildConfiguration)
  displayName: 'Build solution - $(buildConfiguration)'

- task: SonarCloudAnalyze@1
  displayName: 'Run SonarCloud code analysis'
  continueOnError: true

- task: SonarCloudPublish@1
  displayName: 'Publish SonarCloud quality gate results'
  continueOnError: true


- task: NodeTool@0
  displayName: 'Install Node.js tool to setup Appium and emulators'
  inputs:
    versionSpec: '11.15.0'

- script: |
    echo "Configuring Environment"
    echo $JAVA_HOME
    ls /Library/Java/JavaVirtualMachines/

    ls $ANDROID_HOME/build-tools/
    export PATH=$PATH:$JAVA_HOME/bin

    echo export "ANDROID_HOME=\$ANDROID_HOME" >> ~/.bash_profile
    export PATH=$PATH:$ANDROID_HOME

    mvn -version
    echo $ANDROID_HOME
    echo $JAVA_HOME
    echo $PATH

    echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;$(ANDROID_EMU_TARGET);$(ANDROID_EMU_TAG);$(ANDROID_EMU_ABI)'
    echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n "$(ANDROID_EMU_NAME)" -k 'system-images;$(ANDROID_EMU_TARGET);$(ANDROID_EMU_TAG);$(ANDROID_EMU_ABI)' --force
    echo $ANDROID_HOME/emulator/emulator -list-avds

    echo "Starting emulator"
    nohup $ANDROID_HOME/emulator/emulator -avd "$(ANDROID_EMU_NAME)" -no-snapshot > /dev/null 2>&1 &
    $ANDROID_HOME/platform-tools/adb wait-for-device
    while [[ $? -ne 0 ]]; do sleep 1; $ANDROID_HOME/platform-tools/adb shell pm list packages; done;
    $ANDROID_HOME/platform-tools/adb devices
    echo "Emulator started"

    echo "Installing Appium"
    node --version
    npm list --depth 0
    npm install -g appium@v1.17.0-rc.1
    # --chromedriver-skip-install
    ln -fs /usr/local/lib/node_modules/appium/build/lib/main.js /usr/local/bin/appium
    chmod +x /usr/local/bin/appium
    export PATH=$PATH:/usr/local/bin/appium

    echo "Installing and Running Appium doctor"
    npm install -g appium-doctor
    ln -fs /usr/local/lib/node_modules/appium-doctor/appium-doctor.js /usr/local/bin/appium-doctor
    chmod +x /usr/local/bin/appium-doctor
    export PATH=$PATH:/usr/local/bin/appium-doctor

    npm list --depth 0

    appium --version
    appium-doctor
    

- task: DotNetCoreCLI@2
  displayName: 'Run tests using appium local service'
  inputs:
    command: 'test'
    projects: '**/*Tests*/*.csproj'
    arguments: -c $(buildConfiguration) --no-build
    publishTestResults: true

- script: |
    echo "##vso[task.setvariable variable=isRemote;]true"
    appium --allow-insecure chromedriver_autodownload &
    echo "Appium server started"

- task: DotNetCoreCLI@2
  displayName: 'Run tests using manually started (remote) server'
  inputs:
    command: 'test'
    projects: '**/*Tests*/*.csproj'
    arguments: -c $(buildConfiguration) --no-build
    publishTestResults: true

- task: CopyFiles@2
  displayName: 'Copy failure screenshots and test logs'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
        **/*Tests*/Screenshots/*.png
        **/*Tests*/Log/*.log
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish copied artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  condition: succeededOrFailed()
  
- task: GitVersion@5
  displayName: 'Run GitVersion'
  inputs:
    runtime: 'core'
    
- script: dotnet pack Aquality.Appium.Mobile\src\Aquality.Appium.Mobile\Aquality.Appium.Mobile.csproj -c $(buildConfiguration) --no-build -p:Version=$(GitVersion.NuGetVersion) -o $(Build.ArtifactStagingDirectory)
  displayName: 'Create NuGet package'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
- task: NuGetCommand@2
  displayName: 'Push NuGet package'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/Aquality.Appium.Mobile*.nupkg;!$(Build.ArtifactStagingDirectory)/**/Aquality.Appium.Mobile*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
- task: GitHubRelease@0
  displayName: 'Create tag on GitHub'
  inputs:
    gitHubConnection: 'GitHub'
    repositoryName: 'aquality-automation/aquality-appium-mobile-dotnet'
    action: 'create'
    tag: 'v$(GitVersion.NuGetVersion)'
    tagSource: 'manual'
    isPreRelease: contains(variables['GitVersion.NuGetVersion'], '-')
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  